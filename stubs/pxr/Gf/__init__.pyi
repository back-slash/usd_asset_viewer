from __future__ import annotations
from typing import Any, Dict, List, Optional, Tuple, Union, overload
import numpy as np

__all__ = [
    # Constants
    "EPSILON", "PI", "HALF_PI", "TWO_PI", "DEGREES_PER_RADIAN", "RADIANS_PER_DEGREE",
    
    # Functions
    "AbsEqual", "AbsEqualWithinFloatTolerance", "CompareWithTolerance", "Clamp", 
    "Lerp", "RadiansToDegrees", "DegreesToRadians", "Sgn", "Sqr", "Sqrt",
    
    # Vector classes
    "Vec2d", "Vec2f", "Vec3d", "Vec3f", "Vec4d", "Vec4f",
    
    # Matrix classes
    "Matrix2d", "Matrix3d", "Matrix4d", "Matrix2f", "Matrix3f", "Matrix4f",
    
    # Quaternion classes
    "QuaternionF", "QuaternionD",
    
    # Range classes
    "Range1d", "Range1f", "Range2d", "Range3d",
    
    # Transformation classes
    "Rotation3d", "Transform3d",
    
    # Geometry classes
    "Plane3f", "Plane3d", "Ray3f", "Ray3d", "Line3f", "Line3d", 
    "Size2", "Size3", "Frustum", "BBox3d",
    
    # Array types
    "ArrayDouble", "ArrayFloat", "Vec2dArray", "Vec2fArray", "Vec3dArray", "Vec3fArray",
    "Vec4dArray", "Vec4fArray", "QuaternionDArray", "QuaternionFArray",
    "Matrix3dArray", "Matrix4dArray"
]



# Stub file for the pxr.Gf module
# Common Gf module constants and functions
EPSILON = 0.000001
PI = 3.14159265358979323846
HALF_PI = PI / 2.0
TWO_PI = PI * 2.0
DEGREES_PER_RADIAN = 57.2957795130823208768
RADIANS_PER_DEGREE = 0.01745329251994329577

def AbsEqual(a: float, b: float, epsilon: float = EPSILON) -> bool: ...
def AbsEqualWithinFloatTolerance(a: float, b: float) -> bool: ...
def CompareWithTolerance(a: float, b: float, epsilon: float = EPSILON) -> int: ...
def Clamp(value: float, lower: float, upper: float) -> float: ...
def Lerp(parameter: float, start: float, end: float) -> float: ...
def RadiansToDegrees(radians: float) -> float: ...
def DegreesToRadians(degrees: float) -> float: ...
def Sgn(value: float) -> float: ...
def Sqr(value: float) -> float: ...
def Sqrt(value: float) -> float: ...

class Vec2d:
    """Two-dimensional double-precision floating-point vector."""
    def __init__(self, x: float = 0.0, y: float = 0.0): ...
    def __init__(self, other: Vec2d): ...
    def __add__(self, other: Vec2d) -> Vec2d: ...
    def __sub__(self, other: Vec2d) -> Vec2d: ...
    def __mul__(self, scalar: float) -> Vec2d: ...
    def __truediv__(self, scalar: float) -> Vec2d: ...
    def __neg__(self) -> Vec2d: ...
    def __getitem__(self, index: int) -> float: ...
    def __setitem__(self, index: int, value: float) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
    def __eq__(self, other: Vec2d) -> bool: ...
    def __ne__(self, other: Vec2d) -> bool: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def normalize(self) -> None: ...
    def getNormalized(self) -> Vec2d: ...
    def getLength(self) -> float: ...
    def getLengthSq(self) -> float: ...
    def dot(self, other: Vec2d) -> float: ...
    def cross(self, other: Vec2d) -> float: ...
    def isZero(self) -> bool: ...
    def orthogonalize(self) -> Vec2d: ...


class Vec2f:
    """Two-dimensional single-precision floating-point vector."""
    def __init__(self, x: float = 0.0, y: float = 0.0): ...
    def __init__(self, other: Vec2f): ...
    def __add__(self, other: Vec2f) -> Vec2f: ...
    def __sub__(self, other: Vec2f) -> Vec2f: ...
    def __mul__(self, scalar: float) -> Vec2f: ...
    def __truediv__(self, scalar: float) -> Vec2f: ...
    def __neg__(self) -> Vec2f: ...
    def __getitem__(self, index: int) -> float: ...
    def __setitem__(self, index: int, value: float) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
    def __eq__(self, other: Vec2f) -> bool: ...
    def __ne__(self, other: Vec2f) -> bool: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def normalize(self) -> None: ...
    def getNormalized(self) -> Vec2f: ...
    def getLength(self) -> float: ...
    def getLengthSq(self) -> float: ...
    def dot(self, other: Vec2f) -> float: ...
    def cross(self, other: Vec2f) -> float: ...
    def isZero(self) -> bool: ...
    def orthogonalize(self) -> Vec2f: ...

class Vec3d:
    """Three-dimensional double-precision floating-point vector."""
    def __init__(self, x: float = 0.0, y: float = 0.0, z: float = 0.0): ...
    def __init__(self, other: Vec3d): ...
    def __add__(self, other: Vec3d) -> Vec3d: ...
    def __sub__(self, other: Vec3d) -> Vec3d: ...
    def __mul__(self, scalar: float) -> Vec3d: ...
    def __truediv__(self, scalar: float) -> Vec3d: ...
    def __neg__(self) -> Vec3d: ...
    def __getitem__(self, index: int) -> float: ...
    def __setitem__(self, index: int, value: float) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
    def __eq__(self, other: Vec3d) -> bool: ...
    def __ne__(self, other: Vec3d) -> bool: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def normalize(self) -> None: ...
    def getNormalized(self) -> Vec3d: ...
    def getLength(self) -> float: ...
    def getLengthSq(self) -> float: ...
    def dot(self, other: Vec3d) -> float: ...
    def cross(self, other: Vec3d) -> Vec3d: ...
    def isZero(self) -> bool: ...

class Vec3f:
    """Three-dimensional single-precision floating-point vector."""
    def __init__(self, x: float = 0.0, y: float = 0.0, z: float = 0.0): ...
    def __init__(self, other: Vec3f): ...
    def __add__(self, other: Vec3f) -> Vec3f: ...
    def __sub__(self, other: Vec3f) -> Vec3f: ...
    def __mul__(self, scalar: float) -> Vec3f: ...
    def __truediv__(self, scalar: float) -> Vec3f: ...
    def __neg__(self) -> Vec3f: ...
    def __getitem__(self, index: int) -> float: ...
    def __setitem__(self, index: int, value: float) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
    def __eq__(self, other: Vec3f) -> bool: ...
    def __ne__(self, other: Vec3f) -> bool: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def normalize(self) -> None: ...
    def getNormalized(self) -> Vec3f: ...
    def getLength(self) -> float: ...
    def getLengthSq(self) -> float: ...
    def dot(self, other: Vec3f) -> float: ...
    def cross(self, other: Vec3f) -> Vec3f: ...
    def isZero(self) -> bool: ...

class Vec4d:
    """Four-dimensional double-precision floating-point vector."""
    def __init__(self, x: float = 0.0, y: float = 0.0, z: float = 0.0, w: float = 0.0): ...
    def __init__(self, other: Vec4d): ...
    def __add__(self, other: Vec4d) -> Vec4d: ...
    def __sub__(self, other: Vec4d) -> Vec4d: ...
    def __mul__(self, scalar: float) -> Vec4d: ...
    def __truediv__(self, scalar: float) -> Vec4d: ...
    def __neg__(self) -> Vec4d: ...
    def __getitem__(self, index: int) -> float: ...
    def __setitem__(self, index: int, value: float) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
    def __eq__(self, other: Vec4d) -> bool: ...
    def __ne__(self, other: Vec4d) -> bool: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def normalize(self) -> None: ...
    def getNormalized(self) -> Vec4d: ...
    def getLength(self) -> float: ...
    def getLengthSq(self) -> float: ...
    def dot(self, other: Vec4d) -> float: ...
    def isZero(self) -> bool: ...

class Vec4f:
    """Four-dimensional single-precision floating-point vector."""
    def __init__(self, x: float = 0.0, y: float = 0.0, z: float = 0.0, w: float = 0.0): ...
    def __init__(self, other: Vec4f): ...
    def __add__(self, other: Vec4f) -> Vec4f: ...
    def __sub__(self, other: Vec4f) -> Vec4f: ...
    def __mul__(self, scalar: float) -> Vec4f: ...
    def __truediv__(self, scalar: float) -> Vec4f: ...
    def __neg__(self) -> Vec4f: ...
    def __getitem__(self, index: int) -> float: ...
    def __setitem__(self, index: int, value: float) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
    def __eq__(self, other: Vec4f) -> bool: ...
    def __ne__(self, other: Vec4f) -> bool: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def normalize(self) -> None: ...
    def getNormalized(self) -> Vec4f: ...
    def getLength(self) -> float: ...
    def getLengthSq(self) -> float: ...
    def dot(self, other: Vec4f) -> float: ...
    def isZero(self) -> bool: ...



# Matrix types
class Matrix2d:
    """2x2 double-precision matrix."""
    def __init__(self): ...
    def __init__(self, m00: float, m01: float, m10: float, m11: float): ...
    def __init__(self, other: Matrix2d): ...
    def __mul__(self, other: Matrix2d) -> Matrix2d: ...
    def __mul__(self, vector: Vec2d) -> Vec2d: ...
    def __eq__(self, other: Matrix2d) -> bool: ...
    def __ne__(self, other: Matrix2d) -> bool: ...
    def GetTranspose(self) -> Matrix2d: ...
    def GetInverse(self) -> Matrix2d: ...
    def GetDeterminant(self) -> float: ...
    def SetIdentity(self) -> None: ...

class Matrix3d:
    """3x3 double-precision matrix."""
    def __init__(self): ...
    def __init__(self, m00: float, m01: float, m02: float, 
                  m10: float, m11: float, m12: float,
                  m20: float, m21: float, m22: float): ...
    def __init__(self, other: Matrix3d): ...
    def __mul__(self, other: Matrix3d) -> Matrix3d: ...
    def __mul__(self, vector: Vec3d) -> Vec3d: ...
    def __eq__(self, other: Matrix3d) -> bool: ...
    def __ne__(self, other: Matrix3d) -> bool: ...
    def GetTranspose(self) -> Matrix3d: ...
    def GetInverse(self) -> Matrix3d: ...
    def GetDeterminant(self) -> float: ...
    def SetIdentity(self) -> None: ...

class Matrix4d:
    """4x4 double-precision matrix."""
    def __init__(self, other: Vec2d): ...
    def __add__(self, other: Vec2d) -> Vec2d: ...
    def __sub__(self, other: Vec2d) -> Vec2d: ...
    def __mul__(self, scalar: float) -> Vec2d: ...
    def __truediv__(self, scalar: float) -> Vec2d: ...
    def __neg__(self) -> Vec2d: ...
    def __getitem__(self, index: int) -> float: ...
    def __setitem__(self, index: int, value: float) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
    def __eq__(self, other: Vec2d) -> bool: ...
    def __ne__(self, other: Vec2d) -> bool: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def normalize(self) -> None: ...
    def getNormalized(self) -> Vec2d: ...
    def getLength(self) -> float: ...
    def getLengthSq(self) -> float: ...
    def dot(self, other: Vec2d) -> float: ...
    def cross(self, other: Vec2d) -> float: ...
    def isZero(self) -> bool: ...
    def orthogonalize(self) -> Vec2d: ...

class Matrix4d:
    """4x4 double-precision matrix."""
    def __init__(self, other: Vec2d): ...
    def __add__(self, other: Vec2d) -> Vec2d: ...
    def __sub__(self, other: Vec2d) -> Vec2d: ...
    def __mul__(self, scalar: float) -> Vec2d: ...
    def __truediv__(self, scalar: float) -> Vec2d: ...
    def __neg__(self) -> Vec2d: ...
    def __getitem__(self, index: int) -> float: ...
    def __setitem__(self, index: int, value: float) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
    def __eq__(self, other: Vec2d) -> bool: ...
    def __ne__(self, other: Vec2d) -> bool: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def normalize(self) -> None: ...
    def getNormalized(self) -> Vec2d: ...
    def getLength(self) -> float: ...
    def getLengthSq(self) -> float: ...
    def dot(self, other: Vec2d) -> float: ...
    def cross(self, other: Vec2d) -> float: ...
    def isZero(self) -> bool: ...
    def orthogonalize(self) -> Vec2d: ...

class Matrix2f:
    """2x2 single-precision matrix."""
    def __init__(self): ...
    def __init__(self, m00: float, m01: float, m10: float, m11: float): ...
    def __init__(self, other: Matrix2f): ...
    def __mul__(self, other: Matrix2f) -> Matrix2f: ...
    def __mul__(self, vector: Vec2f) -> Vec2f: ...
    def __eq__(self, other: Matrix2f) -> bool: ...
    def __ne__(self, other: Matrix2f) -> bool: ...
    def GetTranspose(self) -> Matrix2f: ...
    def GetInverse(self) -> Matrix2f: ...
    def GetDeterminant(self) -> float: ...
    def SetIdentity(self) -> None: ...

class Matrix3f:
    """3x3 single-precision matrix."""
    def __init__(self): ...
    def __init__(self, m00: float, m01: float, m02: float, 
                 m10: float, m11: float, m12: float,
                 m20: float, m21: float, m22: float): ...
    def __init__(self, other: Matrix3f): ...
    def __mul__(self, other: Matrix3f) -> Matrix3f: ...
    def __mul__(self, vector: Vec3f) -> Vec3f: ...
    def __eq__(self, other: Matrix3f) -> bool: ...
    def __ne__(self, other: Matrix3f) -> bool: ...
    def GetTranspose(self) -> Matrix3f: ...
    def GetInverse(self) -> Matrix3f: ...
    def GetDeterminant(self) -> float: ...
    def SetIdentity(self) -> None: ...

class Matrix4f:
    """4x4 single-precision matrix."""
    def __init__(self): ...
    def __init__(self, m00: float = 1.0, m01: float = 0.0, m02: float = 0.0, m03: float = 0.0,
                 m10: float = 0.0, m11: float = 1.0, m12: float = 0.0, m13: float = 0.0,
                 m20: float = 0.0, m21: float = 0.0, m22: float = 1.0, m23: float = 0.0,
                 m30: float = 0.0, m31: float = 0.0, m32: float = 0.0, m33: float = 1.0): ...
    def __init__(self, other: Matrix4f): ...
    def __mul__(self, other: Matrix4f) -> Matrix4f: ...
    def __mul__(self, vector: Vec4f) -> Vec4f: ...
    def __eq__(self, other: Matrix4f) -> bool: ...
    def __ne__(self, other: Matrix4f) -> bool: ...
    def GetTranspose(self) -> Matrix4f: ...
    def GetInverse(self) -> Matrix4f: ...
    def GetDeterminant(self) -> float: ...
    def SetIdentity(self) -> None: ...





class QuaternionF:
    """Single-precision quaternion for representing rotations."""
    def __init__(self, real: float = 1.0, i: float = 0.0, j: float = 0.0, k: float = 0.0): ...
    def __init__(self, axis: Vec3f, angle: float): ...
    def __init__(self, other: QuaternionF): ...
    def __mul__(self, other: QuaternionF) -> QuaternionF: ...
    def __mul__(self, scalar: float) -> QuaternionF: ...
    def __eq__(self, other: QuaternionF) -> bool: ...
    def __ne__(self, other: QuaternionF) -> bool: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def GetReal(self) -> float: ...
    def GetImaginary(self) -> Vec3f: ...
    def GetConjugate(self) -> QuaternionF: ...
    def GetInverse(self) -> QuaternionF: ...
    def GetNormalized(self) -> QuaternionF: ...
    def Normalize(self) -> None: ...
    def GetLength(self) -> float: ...
    def GetLengthSq(self) -> float: ...
    def SetIdentity(self) -> None: ...
    def SetAxisAngle(self, axis: Vec3f, angle: float) -> None: ...
    def GetAxisAngle(self) -> Tuple[Vec3f, float]: ...
    def TransformVector(self, vec: Vec3f) -> Vec3f: ...
    def GetMatrix(self) -> Matrix3f: ...




class QuaternionD:
    """Double-precision quaternion for representing rotations."""
    def __init__(self, real: float = 1.0, i: float = 0.0, j: float = 0.0, k: float = 0.0): ...
    def __init__(self, axis: Vec3d, angle: float): ...
    def __init__(self, other: QuaternionD): ...
    def __mul__(self, other: QuaternionD) -> QuaternionD: ...
    def __mul__(self, scalar: float) -> QuaternionD: ...
    def __eq__(self, other: QuaternionD) -> bool: ...
    def __ne__(self, other: QuaternionD) -> bool: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def GetReal(self) -> float: ...
    def GetImaginary(self) -> Vec3d: ...
    def GetConjugate(self) -> QuaternionD: ...
    def GetInverse(self) -> QuaternionD: ...
    def GetNormalized(self) -> QuaternionD: ...
    def Normalize(self) -> None: ...
    def GetLength(self) -> float: ...
    def GetLengthSq(self) -> float: ...
    def SetIdentity(self) -> None: ...
    def SetAxisAngle(self, axis: Vec3d, angle: float) -> None: ...
    def GetAxisAngle(self) -> Tuple[Vec3d, float]: ...
    def TransformVector(self, vec: Vec3d) -> Vec3d: ...
    def GetMatrix(self) -> Matrix3d: ...


class Range1d:
    """Double-precision one-dimensional range."""
    def __init__(self, min: float = 0.0, max: float = 0.0): ...
    def __init__(self, other: Range1d): ...
    def __eq__(self, other: Range1d) -> bool: ...
    def __ne__(self, other: Range1d) -> bool: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def GetMin(self) -> float: ...
    def GetMax(self) -> float: ...
    def GetSize(self) -> float: ...
    def IsEmpty(self) -> bool: ...
    def IsInfinite(self) -> bool: ...
    def Contains(self, value: float) -> bool: ...
    def Union(self, other: Range1d) -> Range1d: ...
    def Intersection(self, other: Range1d) -> Range1d: ...
    def Expand(self, value: float) -> None: ...
    def GetMidpoint(self) -> float: ...

class Range1f:
    """Single-precision one-dimensional range."""
    def __init__(self, min: float = 0.0, max: float = 0.0): ...
    def __init__(self, other: Range1f): ...
    def __eq__(self, other: Range1f) -> bool: ...
    def __ne__(self, other: Range1f) -> bool: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def GetMin(self) -> float: ...
    def GetMax(self) -> float: ...
    def GetSize(self) -> float: ...
    def IsEmpty(self) -> bool: ...
    def IsInfinite(self) -> bool: ...
    def Contains(self, value: float) -> bool: ...
    def Union(self, other: Range1f) -> Range1f: ...
    def Intersection(self, other: Range1f) -> Range1f: ...
    def Expand(self, value: float) -> None: ...
    def GetMidpoint(self) -> float: ...

class Range2d:
    """Double-precision two-dimensional range."""
    def __init__(self): ...
    def __init__(self, min: Vec2d, max: Vec2d): ...
    def __init__(self, other: Range2d): ...
    def __eq__(self, other: Range2d) -> bool: ...
    def __ne__(self, other: Range2d) -> bool: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def GetMin(self) -> Vec2d: ...
    def GetMax(self) -> Vec2d: ...
    def GetSize(self) -> Vec2d: ...
    def IsEmpty(self) -> bool: ...
    def Contains(self, point: Vec2d) -> bool: ...
    def Union(self, other: Range2d) -> Range2d: ...
    def Intersection(self, other: Range2d) -> Range2d: ...
    def Expand(self, point: Vec2d) -> None: ...
    def GetMidpoint(self) -> Vec2d: ...

class Range3d:
    """Double-precision three-dimensional range."""
    def __init__(self): ...
    def __init__(self, min: Vec3d, max: Vec3d): ...
    def __init__(self, other: Range3d): ...
    def __eq__(self, other: Range3d) -> bool: ...
    def __ne__(self, other: Range3d) -> bool: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def GetMin(self) -> Vec3d: ...
    def GetMax(self) -> Vec3d: ...
    def GetSize(self) -> Vec3d: ...
    def IsEmpty(self) -> bool: ...
    def Contains(self, point: Vec3d) -> bool: ...
    def Union(self, other: Range3d) -> Range3d: ...
    def Intersection(self, other: Range3d) -> Range3d: ...
    def Expand(self, point: Vec3d) -> None: ...
    def GetMidpoint(self) -> Vec3d: ...

class Rotation3d:
    """Double-precision 3D rotation."""
    def __init__(self): ...
    def __init__(self, q: QuaternionD): ...
    def __init__(self, axis: Vec3d, angle: float): ...
    def __init__(self, rotMatrix: Matrix3d): ...
    def __init__(self, other: Rotation3d): ...
    def __mul__(self, other: Rotation3d) -> Rotation3d: ...
    def __eq__(self, other: Rotation3d) -> bool: ...
    def __ne__(self, other: Rotation3d) -> bool: ...
    def SetIdentity(self) -> None: ...
    def SetAxisAngle(self, axis: Vec3d, angle: float) -> None: ...
    def SetQuaternion(self, q: QuaternionD) -> None: ...
    def SetRotateInto(self, v1: Vec3d, v2: Vec3d) -> None: ...
    def GetQuaternion(self) -> QuaternionD: ...
    def GetInverse(self) -> Rotation3d: ...
    def GetMatrix(self) -> Matrix3d: ...
    def TransformVector(self, vec: Vec3d) -> Vec3d: ...
    def DecomposeRotation(self, axis1: Vec3d, axis2: Vec3d, axis3: Vec3d) -> Tuple[float, float, float]: ...

class Transform3d:
    """Double-precision 3D transformation with rotation, scale and translation."""
    def __init__(self): ...
    def __init__(self, rotation: Rotation3d, scale: Vec3d = None, translation: Vec3d = None): ...
    def __init__(self, matrix: Matrix4d): ...
    def __init__(self, other: Transform3d): ...
    def __mul__(self, other: Transform3d) -> Transform3d: ...
    def __eq__(self, other: Transform3d) -> bool: ...
    def __ne__(self, other: Transform3d) -> bool: ...
    def SetIdentity(self) -> None: ...
    def SetRotation(self, rotation: Rotation3d) -> None: ...
    def SetScale(self, scale: Vec3d) -> None: ...
    def SetTranslation(self, translation: Vec3d) -> None: ...
    def GetRotation(self) -> Rotation3d: ...
    def GetScale(self) -> Vec3d: ...
    def GetTranslation(self) -> Vec3d: ...
    def GetMatrix(self) -> Matrix4d: ...
    def GetInverse(self) -> Transform3d: ...
    def TransformPoint(self, point: Vec3d) -> Vec3d: ...
    def TransformVector(self, vector: Vec3d) -> Vec3d: ...
    def TransformAffine(self, point: Vec3d) -> Vec3d: ...

class Plane3f:
    """Single-precision 3D plane."""
    def __init__(self): ...
    def __init__(self, normal: Vec3f, point: Vec3f): ...
    def __init__(self, normal: Vec3f, distanceFromOrigin: float): ...
    def __init__(self, p1: Vec3f, p2: Vec3f, p3: Vec3f): ...
    def __init__(self, other: Plane3f): ...
    def __eq__(self, other: Plane3f) -> bool: ...
    def __ne__(self, other: Plane3f) -> bool: ...
    def GetNormal(self) -> Vec3f: ...
    def GetDistanceFromOrigin(self) -> float: ...
    def Set(self, normal: Vec3f, point: Vec3f) -> None: ...
    def Set(self, normal: Vec3f, distanceFromOrigin: float) -> None: ...
    def Set(self, p1: Vec3f, p2: Vec3f, p3: Vec3f) -> None: ...
    def Transform(self, transform: Transform3d) -> Plane3f: ...
    def GetDistance(self, point: Vec3f) -> float: ...

class Plane3d:
    """Double-precision 3D plane."""
    def __init__(self): ...
    def __init__(self, normal: Vec3d, point: Vec3d): ...
    def __init__(self, normal: Vec3d, distanceFromOrigin: float): ...
    def __init__(self, p1: Vec3d, p2: Vec3d, p3: Vec3d): ...
    def __init__(self, other: Plane3d): ...
    def __eq__(self, other: Plane3d) -> bool: ...
    def __ne__(self, other: Plane3d) -> bool: ...
    def GetNormal(self) -> Vec3d: ...
    def GetDistanceFromOrigin(self) -> float: ...
    def Set(self, normal: Vec3d, point: Vec3d) -> None: ...
    def Set(self, normal: Vec3d, distanceFromOrigin: float) -> None: ...
    def Set(self, p1: Vec3d, p2: Vec3d, p3: Vec3d) -> None: ...
    def Transform(self, transform: Transform3d) -> Plane3d: ...
    def GetDistance(self, point: Vec3d) -> float: ...

class Ray3f:
    """Single-precision 3D ray."""
    def __init__(self): ...
    def __init__(self, origin: Vec3f, direction: Vec3f): ...
    def __init__(self, other: Ray3f): ...
    def __eq__(self, other: Ray3f) -> bool: ...
    def __ne__(self, other: Ray3f) -> bool: ...
    def GetOrigin(self) -> Vec3f: ...
    def GetDirection(self) -> Vec3f: ...
    def Set(self, origin: Vec3f, direction: Vec3f) -> None: ...
    def FindClosestPoint(self, point: Vec3f) -> Vec3f: ...
    def Transform(self, transform: Transform3d) -> Ray3f: ...

class Ray3d:
    """Double-precision 3D ray."""
    def __init__(self): ...
    def __init__(self, origin: Vec3d, direction: Vec3d): ...
    def __init__(self, other: Ray3d): ...
    def __eq__(self, other: Ray3d) -> bool: ...
    def __ne__(self, other: Ray3d) -> bool: ...
    def GetOrigin(self) -> Vec3d: ...
    def GetDirection(self) -> Vec3d: ...
    def Set(self, origin: Vec3d, direction: Vec3d) -> None: ...
    def FindClosestPoint(self, point: Vec3d) -> Vec3d: ...
    def Transform(self, transform: Transform3d) -> Ray3d: ...

class Line3f:
    """Single-precision 3D line."""
    def __init__(self): ...
    def __init__(self, point1: Vec3f, point2: Vec3f): ...
    def __init__(self, other: Line3f): ...
    def __eq__(self, other: Line3f) -> bool: ...
    def __ne__(self, other: Line3f) -> bool: ...
    def GetPoint1(self) -> Vec3f: ...
    def GetPoint2(self) -> Vec3f: ...
    def GetDirection(self) -> Vec3f: ...
    def Set(self, point1: Vec3f, point2: Vec3f) -> None: ...
    def FindClosestPoint(self, point: Vec3f) -> Vec3f: ...

class Line3d:
    """Double-precision 3D line."""
    def __init__(self): ...
    def __init__(self, point1: Vec3d, point2: Vec3d): ...
    def __init__(self, other: Line3d): ...
    def __eq__(self, other: Line3d) -> bool: ...
    def __ne__(self, other: Line3d) -> bool: ...
    def GetPoint1(self) -> Vec3d: ...
    def GetPoint2(self) -> Vec3d: ...
    def GetDirection(self) -> Vec3d: ...
    def Set(self, point1: Vec3d, point2: Vec3d) -> None: ...
    def FindClosestPoint(self, point: Vec3d) -> Vec3d: ...

    # Additional Gf types and utilities

class Size2:
    """Two-dimensional size specification."""
    def __init__(self, width: int = 0, height: int = 0): ...
    def __init__(self, other: Size2): ...
    def __eq__(self, other: Size2) -> bool: ...
    def __ne__(self, other: Size2) -> bool: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def GetWidth(self) -> int: ...
    def GetHeight(self) -> int: ...
    def Set(self, width: int, height: int) -> None: ...

class Size3:
    """Three-dimensional size specification."""
    def __init__(self, width: int = 0, height: int = 0, depth: int = 0): ...
    def __init__(self, other: Size3): ...
    def __eq__(self, other: Size3) -> bool: ...
    def __ne__(self, other: Size3) -> bool: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def GetWidth(self) -> int: ...
    def GetHeight(self) -> int: ...
    def GetDepth(self) -> int: ...
    def Set(self, width: int, height: int, depth: int) -> None: ...

class Frustum:
    """Camera frustum specification."""
    def __init__(self): ...
    def __init__(self, nearPlane: float, farPlane: float, 
                 left: float, right: float,
                 bottom: float, top: float): ...
    def __init__(self, other: Frustum): ...
    def __eq__(self, other: Frustum) -> bool: ...
    def __ne__(self, other: Frustum) -> bool: ...
    def GetNearPlane(self) -> float: ...
    def GetFarPlane(self) -> float: ...
    def GetWindow(self) -> Tuple[float, float, float, float]: ...
    def GetProjectionMatrix(self) -> Matrix4d: ...
    def ComputeViewingTransform(self) -> Matrix4d: ...
    def TransformBy(self, matrix: Matrix4d) -> None: ...

class BBox3d:
    """3D bounding box."""
    def __init__(self): ...
    def __init__(self, minPoint: Vec3d, maxPoint: Vec3d): ...
    def __init__(self, other: BBox3d): ...
    def __eq__(self, other: BBox3d) -> bool: ...
    def __ne__(self, other: BBox3d) -> bool: ...
    def GetMin(self) -> Vec3d: ...
    def GetMax(self) -> Vec3d: ...
    def GetSize(self) -> Vec3d: ...
    def GetCenter(self) -> Vec3d: ...
    def GetRange(self) -> Range3d: ...
    def IsEmpty(self) -> bool: ...
    def Contains(self, point: Vec3d) -> bool: ...
    def Expand(self, point: Vec3d) -> None: ...
    def Expand(self, box: BBox3d) -> None: ...
    def Transform(self, matrix: Matrix4d) -> None: ...
    def GetIntersection(self, other: BBox3d) -> BBox3d: ...
    def GetUnion(self, other: BBox3d) -> BBox3d: ...
    def GetCorners(self) -> List[Vec3d]: ...


# Array types
class ArrayDouble:
    """Array of double precision values."""
    def __init__(self, values: List[float] = None): ...
    def __init__(self, size: int): ...
    def __getitem__(self, index: int) -> float: ...
    def __setitem__(self, index: int, value: float) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
    def __eq__(self, other: ArrayDouble) -> bool: ...
    def __ne__(self, other: ArrayDouble) -> bool: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def data(self) -> np.ndarray: ...
    def size(self) -> int: ...
    def resize(self, size: int) -> None: ...
    
class ArrayFloat:
    """Array of single precision values."""
    def __init__(self, values: List[float] = None): ...
    def __init__(self, size: int): ...
    def __getitem__(self, index: int) -> float: ...
    def __setitem__(self, index: int, value: float) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
    def __eq__(self, other: ArrayFloat) -> bool: ...
    def __ne__(self, other: ArrayFloat) -> bool: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def data(self) -> np.ndarray: ...
    def size(self) -> int: ...
    def resize(self, size: int) -> None: ...
    
class Vec2dArray:
    """Array of Vec2d objects."""
    def __init__(self, values: List[Vec2d] = None): ...
    def __init__(self, size: int): ...
    def __getitem__(self, index: int) -> Vec2d: ...
    def __setitem__(self, index: int, value: Vec2d) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
    def __eq__(self, other: Vec2dArray) -> bool: ...
    def __ne__(self, other: Vec2dArray) -> bool: ...
    def data(self) -> np.ndarray: ...
    def size(self) -> int: ...
    def resize(self, size: int) -> None: ...

class Vec2fArray:
    """Array of Vec2f objects."""
    def __init__(self, values: List[Vec2f] = None): ...
    def __init__(self, size: int): ...
    def __getitem__(self, index: int) -> Vec2f: ...
    def __setitem__(self, index: int, value: Vec2f) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
    def __eq__(self, other: Vec2fArray) -> bool: ...
    def __ne__(self, other: Vec2fArray) -> bool: ...
    def data(self) -> np.ndarray: ...
    def size(self) -> int: ...
    def resize(self, size: int) -> None: ...

class Vec3dArray:
    """Array of Vec3d objects."""
    def __init__(self, values: List[Vec3d] = None): ...
    def __init__(self, size: int): ...
    def __getitem__(self, index: int) -> Vec3d: ...
    def __setitem__(self, index: int, value: Vec3d) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
    def __eq__(self, other: Vec3dArray) -> bool: ...
    def __ne__(self, other: Vec3dArray) -> bool: ...
    def data(self) -> np.ndarray: ...
    def size(self) -> int: ...
    def resize(self, size: int) -> None: ...

class Vec3fArray:
    """Array of Vec3f objects."""
    def __init__(self, values: List[Vec3f] = None): ...
    def __init__(self, size: int): ...
    def __getitem__(self, index: int) -> Vec3f: ...
    def __setitem__(self, index: int, value: Vec3f) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
    def __eq__(self, other: Vec3fArray) -> bool: ...
    def __ne__(self, other: Vec3fArray) -> bool: ...
    def data(self) -> np.ndarray: ...
    def size(self) -> int: ...
    def resize(self, size: int) -> None: ...

class Vec4dArray:
    """Array of Vec4d objects."""
    def __init__(self, values: List[Vec4d] = None): ...
    def __init__(self, size: int): ...
    def __getitem__(self, index: int) -> Vec4d: ...
    def __setitem__(self, index: int, value: Vec4d) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
    def __eq__(self, other: Vec4dArray) -> bool: ...
    def __ne__(self, other: Vec4dArray) -> bool: ...
    def data(self) -> np.ndarray: ...
    def size(self) -> int: ...
    def resize(self, size: int) -> None: ...

class Vec4fArray:
    """Array of Vec4f objects."""
    def __init__(self, values: List[Vec4f] = None): ...
    def __init__(self, size: int): ...
    def __getitem__(self, index: int) -> Vec4f: ...
    def __setitem__(self, index: int, value: Vec4f) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
    def __eq__(self, other: Vec4fArray) -> bool: ...
    def __ne__(self, other: Vec4fArray) -> bool: ...
    def data(self) -> np.ndarray: ...
    def size(self) -> int: ...
    def resize(self, size: int) -> None: ...

class QuaternionDArray:
    """Array of QuaternionD objects."""
    def __init__(self, values: List[QuaternionD] = None): ...
    def __init__(self, size: int): ...
    def __getitem__(self, index: int) -> QuaternionD: ...
    def __setitem__(self, index: int, value: QuaternionD) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
    def __eq__(self, other: QuaternionDArray) -> bool: ...
    def __ne__(self, other: QuaternionDArray) -> bool: ...
    def data(self) -> np.ndarray: ...
    def size(self) -> int: ...
    def resize(self, size: int) -> None: ...

class QuaternionFArray:
    """Array of QuaternionF objects."""
    def __init__(self, values: List[QuaternionF] = None): ...
    def __init__(self, size: int): ...
    def __getitem__(self, index: int) -> QuaternionF: ...
    def __setitem__(self, index: int, value: QuaternionF) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
    def __eq__(self, other: QuaternionFArray) -> bool: ...
    def __ne__(self, other: QuaternionFArray) -> bool: ...
    def data(self) -> np.ndarray: ...
    def size(self) -> int: ...
    def resize(self, size: int) -> None: ...

class Matrix3dArray:
    """Array of Matrix3d objects."""
    def __init__(self, values: List[Matrix3d] = None): ...
    def __init__(self, size: int): ...
    def __getitem__(self, index: int) -> Matrix3d: ...
    def __setitem__(self, index: int, value: Matrix3d) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
    def __eq__(self, other: Matrix3dArray) -> bool: ...
    def __ne__(self, other: Matrix3dArray) -> bool: ...
    def data(self) -> np.ndarray: ...
    def size(self) -> int: ...
    def resize(self, size: int) -> None: ...

class Matrix4dArray:
    """Array of Matrix4d objects."""
    def __init__(self, values: List[Matrix4d] = None): ...
    def __init__(self, size: int): ...
    def __getitem__(self, index: int) -> Matrix4d: ...
    def __setitem__(self, index: int, value: Matrix4d) -> None: ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
    def __eq__(self, other: Matrix4dArray) -> bool: ...
    def __ne__(self, other: Matrix4dArray) -> bool: ...
    def data(self) -> np.ndarray: ...
    def size(self) -> int: ...
    def resize(self, size: int) -> None: ...


