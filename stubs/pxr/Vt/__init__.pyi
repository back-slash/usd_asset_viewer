from typing import Any, Dict, Generic, Iterable, Iterator, List, Optional, Sequence, Tuple, TypeVar, Union, overload
import numpy as np

__all__ = [
    # Vector types
    'Vec2d', 'Vec3d', 'Vec4d', 
    'Vec2f', 'Vec3f', 'Vec4f', 
    'Vec2i', 'Vec3i', 'Vec4i',
    
    # Matrix types
    'Matrix2d', 'Matrix3d', 'Matrix4d',
    
    # Array types
    'Array', 'FloatArray', 'IntArray', 'StringArray', 
    'BoolArray', 'DoubleArray',
    
    # Vector array specializations
    'Vec2dArray', 'Vec3dArray', 'Vec4dArray',
    'Vec2fArray', 'Vec3fArray', 'Vec4fArray',
    'Vec2iArray', 'Vec3iArray', 'Vec4iArray',
    
    # Matrix array specializations
    'Matrix2dArray', 'Matrix3dArray', 's',
    
    # TypeVar
    'T',
]


# Stub file for Pixar's Vt library

T = TypeVar('T')

# Vector types
class Vec2d:
    def __init__(self, x: float = 0, y: float = 0) -> None: ...
    def __getitem__(self, key: int) -> float: ...
    def __setitem__(self, key: int, value: float) -> None: ...
    def __len__(self) -> int: ...
    def __eq__(self, other: 'Vec2d') -> bool: ...
    def __ne__(self, other: 'Vec2d') -> bool: ...
    def __add__(self, other: 'Vec2d') -> 'Vec2d': ...
    def __sub__(self, other: 'Vec2d') -> 'Vec2d': ...
    def __mul__(self, scalar: float) -> 'Vec2d': ...
    def __rmul__(self, scalar: float) -> 'Vec2d': ...
    def __div__(self, scalar: float) -> 'Vec2d': ...
    def __truediv__(self, scalar: float) -> 'Vec2d': ...
    def __neg__(self) -> 'Vec2d': ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    

class Vec3d:
    def __init__(self, x: float = 0, y: float = 0, z: float = 0) -> None: ...
    def __getitem__(self, key: int) -> float: ...
    def __setitem__(self, key: int, value: float) -> None: ...
    def __len__(self) -> int: ...
    def __eq__(self, other: 'Vec3d') -> bool: ...
    def __ne__(self, other: 'Vec3d') -> bool: ...
    def __add__(self, other: 'Vec3d') -> 'Vec3d': ...
    def __sub__(self, other: 'Vec3d') -> 'Vec3d': ...
    def __mul__(self, scalar: float) -> 'Vec3d': ...
    def __rmul__(self, scalar: float) -> 'Vec3d': ...
    def __div__(self, scalar: float) -> 'Vec3d': ...
    def __truediv__(self, scalar: float) -> 'Vec3d': ...
    def __neg__(self) -> 'Vec3d': ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...

class Vec4d:
    def __init__(self, x: float = 0, y: float = 0, z: float = 0, w: float = 0) -> None: ...
    def __getitem__(self, key: int) -> float: ...
    def __setitem__(self, key: int, value: float) -> None: ...
    def __len__(self) -> int: ...
    def __eq__(self, other: 'Vec4d') -> bool: ...
    def __ne__(self, other: 'Vec4d') -> bool: ...
    def __add__(self, other: 'Vec4d') -> 'Vec4d': ...
    def __sub__(self, other: 'Vec4d') -> 'Vec4d': ...
    def __mul__(self, scalar: float) -> 'Vec4d': ...
    def __rmul__(self, scalar: float) -> 'Vec4d': ...
    def __div__(self, scalar: float) -> 'Vec4d': ...
    def __truediv__(self, scalar: float) -> 'Vec4d': ...
    def __neg__(self) -> 'Vec4d': ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...

class Vec2f:
    def __init__(self, x: float = 0, y: float = 0) -> None: ...
    def __getitem__(self, key: int) -> float: ...
    def __setitem__(self, key: int, value: float) -> None: ...
    def __len__(self) -> int: ...
    def __eq__(self, other: 'Vec2f') -> bool: ...
    def __ne__(self, other: 'Vec2f') -> bool: ...
    def __add__(self, other: 'Vec2f') -> 'Vec2f': ...
    def __sub__(self, other: 'Vec2f') -> 'Vec2f': ...
    def __mul__(self, scalar: float) -> 'Vec2f': ...
    def __rmul__(self, scalar: float) -> 'Vec2f': ...
    def __div__(self, scalar: float) -> 'Vec2f': ...
    def __truediv__(self, scalar: float) -> 'Vec2f': ...
    def __neg__(self) -> 'Vec2f': ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...

class Vec3f:
    def __init__(self, x: float = 0, y: float = 0, z: float = 0) -> None: ...
    def __getitem__(self, key: int) -> float: ...
    def __setitem__(self, key: int, value: float) -> None: ...
    def __len__(self) -> int: ...
    def __eq__(self, other: 'Vec3f') -> bool: ...
    def __ne__(self, other: 'Vec3f') -> bool: ...
    def __add__(self, other: 'Vec3f') -> 'Vec3f': ...
    def __sub__(self, other: 'Vec3f') -> 'Vec3f': ...
    def __mul__(self, scalar: float) -> 'Vec3f': ...
    def __rmul__(self, scalar: float) -> 'Vec3f': ...
    def __div__(self, scalar: float) -> 'Vec3f': ...
    def __truediv__(self, scalar: float) -> 'Vec3f': ...
    def __neg__(self) -> 'Vec3f': ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...

class Vec4f:
    def __init__(self, x: float = 0, y: float = 0, z: float = 0, w: float = 0) -> None: ...
    def __getitem__(self, key: int) -> float: ...
    def __setitem__(self, key: int, value: float) -> None: ...
    def __len__(self) -> int: ...
    def __eq__(self, other: 'Vec4f') -> bool: ...
    def __ne__(self, other: 'Vec4f') -> bool: ...
    def __add__(self, other: 'Vec4f') -> 'Vec4f': ...
    def __sub__(self, other: 'Vec4f') -> 'Vec4f': ...
    def __mul__(self, scalar: float) -> 'Vec4f': ...
    def __rmul__(self, scalar: float) -> 'Vec4f': ...
    def __div__(self, scalar: float) -> 'Vec4f': ...
    def __truediv__(self, scalar: float) -> 'Vec4f': ...
    def __neg__(self) -> 'Vec4f': ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...

class Vec2i:
    def __init__(self, x: int = 0, y: int = 0) -> None: ...
    def __getitem__(self, key: int) -> int: ...
    def __setitem__(self, key: int, value: int) -> None: ...
    def __len__(self) -> int: ...
    def __eq__(self, other: 'Vec2i') -> bool: ...
    def __ne__(self, other: 'Vec2i') -> bool: ...
    def __add__(self, other: 'Vec2i') -> 'Vec2i': ...
    def __sub__(self, other: 'Vec2i') -> 'Vec2i': ...
    def __mul__(self, scalar: int) -> 'Vec2i': ...
    def __rmul__(self, scalar: int) -> 'Vec2i': ...
    def __div__(self, scalar: int) -> 'Vec2i': ...
    def __truediv__(self, scalar: int) -> 'Vec2i': ...
    def __neg__(self) -> 'Vec2i': ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...

class Vec3i:
    def __init__(self, x: int = 0, y: int = 0, z: int = 0) -> None: ...
    def __getitem__(self, key: int) -> int: ...
    def __setitem__(self, key: int, value: int) -> None: ...
    def __len__(self) -> int: ...
    def __eq__(self, other: 'Vec3i') -> bool: ...
    def __ne__(self, other: 'Vec3i') -> bool: ...
    def __add__(self, other: 'Vec3i') -> 'Vec3i': ...
    def __sub__(self, other: 'Vec3i') -> 'Vec3i': ...
    def __mul__(self, scalar: int) -> 'Vec3i': ...
    def __rmul__(self, scalar: int) -> 'Vec3i': ...
    def __div__(self, scalar: int) -> 'Vec3i': ...
    def __truediv__(self, scalar: int) -> 'Vec3i': ...
    def __neg__(self) -> 'Vec3i': ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...

class Vec4i:
    def __init__(self, x: int = 0, y: int = 0, z: int = 0, w: int = 0) -> None: ...
    def __getitem__(self, key: int) -> int: ...
    def __setitem__(self, key: int, value: int) -> None: ...
    def __len__(self) -> int: ...
    def __eq__(self, other: 'Vec4i') -> bool: ...
    def __ne__(self, other: 'Vec4i') -> bool: ...
    def __add__(self, other: 'Vec4i') -> 'Vec4i': ...
    def __sub__(self, other: 'Vec4i') -> 'Vec4i': ...
    def __mul__(self, scalar: int) -> 'Vec4i': ...
    def __rmul__(self, scalar: int) -> 'Vec4i': ...
    def __div__(self, scalar: int) -> 'Vec4i': ...
    def __truediv__(self, scalar: int) -> 'Vec4i': ...
    def __neg__(self) -> 'Vec4i': ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...

# Matrix types
class Matrix2d:
    def __init__(self, m00: float = 1, m01: float = 0, 
                       m10: float = 0, m11: float = 1) -> None: ...
    def __getitem__(self, key: Union[int, Tuple[int, int]]) -> Union[float, List[float]]: ...
    def __setitem__(self, key: Union[int, Tuple[int, int]], value: Union[float, List[float]]) -> None: ...
    def __eq__(self, other: 'Matrix2d') -> bool: ...
    def __ne__(self, other: 'Matrix2d') -> bool: ...
    def __add__(self, other: 'Matrix2d') -> 'Matrix2d': ...
    def __sub__(self, other: 'Matrix2d') -> 'Matrix2d': ...
    def __mul__(self, other: Union['Matrix2d', Vec2d, float]) -> Union['Matrix2d', Vec2d]: ...
    def __rmul__(self, scalar: float) -> 'Matrix2d': ...
    def __truediv__(self, scalar: float) -> 'Matrix2d': ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def GetTranspose(self) -> 'Matrix2d': ...
    def GetInverse(self) -> 'Matrix2d': ...
    def SetIdentity(self) -> None: ...
    def SetZero(self) -> None: ...
    
class Matrix3d:
    def __init__(self, m00: float = 1, m01: float = 0, m02: float = 0,
                       m10: float = 0, m11: float = 1, m12: float = 0,
                       m20: float = 0, m21: float = 0, m22: float = 1) -> None: ...
    def __getitem__(self, key: Union[int, Tuple[int, int]]) -> Union[float, List[float]]: ...
    def __setitem__(self, key: Union[int, Tuple[int, int]], value: Union[float, List[float]]) -> None: ...
    def __eq__(self, other: 'Matrix3d') -> bool: ...
    def __ne__(self, other: 'Matrix3d') -> bool: ...
    def __add__(self, other: 'Matrix3d') -> 'Matrix3d': ...
    def __sub__(self, other: 'Matrix3d') -> 'Matrix3d': ...
    def __mul__(self, other: Union['Matrix3d', Vec3d, float]) -> Union['Matrix3d', Vec3d]: ...
    def __rmul__(self, scalar: float) -> 'Matrix3d': ...
    def __truediv__(self, scalar: float) -> 'Matrix3d': ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def GetTranspose(self) -> 'Matrix3d': ...
    def GetInverse(self) -> 'Matrix3d': ...
    def SetIdentity(self) -> None: ...
    def SetZero(self) -> None: ...
    
class Matrix4d:
    def __init__(self, m00: float = 1, m01: float = 0, m02: float = 0, m03: float = 0,
                       m10: float = 0, m11: float = 1, m12: float = 0, m13: float = 0,
                       m20: float = 0, m21: float = 0, m22: float = 1, m23: float = 0,
                       m30: float = 0, m31: float = 0, m32: float = 0, m33: float = 1) -> None: ...
    def __getitem__(self, key: Union[int, Tuple[int, int]]) -> Union[float, List[float]]: ...
    def __setitem__(self, key: Union[int, Tuple[int, int]], value: Union[float, List[float]]) -> None: ...
    def __eq__(self, other: 'Matrix4d') -> bool: ...
    def __ne__(self, other: 'Matrix4d') -> bool: ...
    def __add__(self, other: 'Matrix4d') -> 'Matrix4d': ...
    def __sub__(self, other: 'Matrix4d') -> 'Matrix4d': ...
    def __mul__(self, other: Union['Matrix4d', Vec4d, float]) -> Union['Matrix4d', Vec4d]: ...
    def __rmul__(self, scalar: float) -> 'Matrix4d': ...
    def __truediv__(self, scalar: float) -> 'Matrix4d': ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def GetTranspose(self) -> 'Matrix4d': ...
    def GetInverse(self) -> 'Matrix4d': ...
    def SetIdentity(self) -> None: ...
    def SetZero(self) -> None: ...


# Array types
class Array(Generic[T]):
    def __init__(self, values: Optional[Iterable[T]] = None) -> None: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: Union[int, slice]) -> Union[T, 'Array[T]']: ...
    def __setitem__(self, key: Union[int, slice], value: Union[T, Iterable[T]]) -> None: ...
    def __iter__(self) -> Iterator[T]: ...
    
# Common array specializations
class FloatArray(Array[float]):
    def __init__(self, values: Optional[Iterable[float]] = None) -> None: ...
    
class IntArray(Array[int]):
    def __init__(self, values: Optional[Iterable[int]] = None) -> None: ...
    
class StringArray(Array[str]):
    def __init__(self, values: Optional[Iterable[str]] = None) -> None: ...
    
class BoolArray(Array[bool]):
    def __init__(self, values: Optional[Iterable[bool]] = None) -> None: ...
    
class DoubleArray(Array[float]):
    def __init__(self, values: Optional[Iterable[float]] = None) -> None: ...

# Vector array specializations
class Vec2dArray(Array[Vec2d]):
    def __init__(self, values: Optional[Iterable[Vec2d]] = None) -> None: ...
    
class Vec3dArray(Array[Vec3d]):
    def __init__(self, values: Optional[Iterable[Vec3d]] = None) -> None: ...
    
class Vec4dArray(Array[Vec4d]):
    def __init__(self, values: Optional[Iterable[Vec4d]] = None) -> None: ...

class Vec2fArray(Array[Vec2f]):
    def __init__(self, values: Optional[Iterable[Vec2f]] = None) -> None: ...
    
class Vec3fArray(Array[Vec3f]):
    def __init__(self, values: Optional[Iterable[Vec3f]] = None) -> None: ...
    
class Vec4fArray(Array[Vec4f]):
    def __init__(self, values: Optional[Iterable[Vec4f]] = None) -> None: ...

class Vec2iArray(Array[Vec2i]):
    def __init__(self, values: Optional[Iterable[Vec2i]] = None) -> None: ...
    
class Vec3iArray(Array[Vec3i]):
    def __init__(self, values: Optional[Iterable[Vec3i]] = None) -> None: ...
    
class Vec4iArray(Array[Vec4i]):
    def __init__(self, values: Optional[Iterable[Vec4i]] = None) -> None: ...

# Matrix array specializations
class Matrix2dArray(Array[Matrix2d]):
    def __init__(self, values: Optional[Iterable[Matrix2d]] = None) -> None: ...
    
class Matrix3dArray(Array[Matrix3d]):
    def __init__(self, values: Optional[Iterable[Matrix3d]] = None) -> None: ...
    
class Matrix4dArray(Array[Matrix4d]):
    def __init__(self, values: Optional[Iterable[Matrix4d]] = None) -> None: ...
